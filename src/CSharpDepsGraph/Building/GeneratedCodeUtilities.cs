using System;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

namespace CSharpDepsGraph.Building;

// Base on Roslyn.Utilities.GeneratedCodeUtilities
internal static class GeneratedCodeUtilities
{
    private static readonly string[] _autoGeneratedStrings = new[] {
        "<autogenerated",
        "<auto-generated"
        };

    public static bool IsGeneratedCode(
        SyntaxTree tree,
        CancellationToken cancellationToken
        )
    {
        return IsGeneratedCodeFile(tree.FilePath)
            || BeginsWithAutoGeneratedComment(tree, cancellationToken);
    }

    private static bool IsGeneratedCodeFile([NotNullWhen(returnValue: true)] string? filePath)
    {
        if (!string.IsNullOrEmpty(filePath))
        {
            var fileName = Path.GetFileName(filePath);
            if (fileName.StartsWith("TemporaryGeneratedFile_", StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }

            var extension = Path.GetExtension(fileName);
            if (!string.IsNullOrEmpty(extension))
            {
                var fileNameWithoutExtension = Path.GetFileNameWithoutExtension(filePath);
                if (fileNameWithoutExtension.EndsWith(".designer", StringComparison.OrdinalIgnoreCase) ||
                    fileNameWithoutExtension.EndsWith(".generated", StringComparison.OrdinalIgnoreCase) ||
                    fileNameWithoutExtension.EndsWith(".g", StringComparison.OrdinalIgnoreCase) ||
                    fileNameWithoutExtension.EndsWith(".g.i", StringComparison.OrdinalIgnoreCase))
                {
                    return true;
                }
            }
        }

        return false;
    }

    private static bool BeginsWithAutoGeneratedComment(
        SyntaxTree tree,
        CancellationToken cancellationToken
        )
    {
        var root = tree.GetRoot(cancellationToken);
        if (root.HasLeadingTrivia)
        {
            var leadingTrivia = root.GetLeadingTrivia();

            foreach (var trivia in leadingTrivia)
            {
                if (!trivia.IsKind(SyntaxKind.SingleLineCommentTrivia)
                    && trivia.IsKind(SyntaxKind.MultiLineCommentTrivia))
                {
                    continue;
                }

                var text = trivia.ToString();

                // Check to see if the text of the comment contains an auto generated comment.
                foreach (var autoGenerated in _autoGeneratedStrings)
                {
                    if (text.Contains(autoGenerated, StringComparison.InvariantCulture))
                    {
                        return true;
                    }
                }
            }
        }

        return false;
    }
}